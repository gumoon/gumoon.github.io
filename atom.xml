<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[自由学习网]]></title>
  <link href="http://www.free-abc.com.cn/atom.xml" rel="self"/>
  <link href="http://www.free-abc.com.cn/"/>
  <updated>2016-11-23T17:09:38+08:00</updated>
  <id>http://www.free-abc.com.cn/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[从零开始配置阿里云ECS]]></title>
    <link href="http://www.free-abc.com.cn/14798739132293.html"/>
    <updated>2016-11-23T12:05:13+08:00</updated>
    <id>http://www.free-abc.com.cn/14798739132293.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">装完centos7.0 64位系统后的状态</h2>

<ol>
<li>默认操作系统情况</li>
</ol>

<pre><code>[root@iZ25gxj8d82Z etc]# uname -a
Linux iZ25gxj8d82Z 3.10.0-123.9.3.el7.x86_64 #1 SMP Thu Nov 6 15:06:03 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
</code></pre>

<ol>
<li>开启的对外端口情况</li>
</ol>

<pre><code>[root@iZ25gxj8d82Z ~]# ss -ntlp
State      Recv-Q Send-Q                                                                                       Local Address:Port                                                                                         Peer Address:Port
LISTEN     0      128                                                                                                      *:22                                                                                                      *:*      users:((&quot;sshd&quot;,895,3))
</code></pre>

<p>只开放了22端口。</p>

<ol>
<li>检查默认开机启动应用</li>
</ol>

<pre><code>[root@iZ25gxj8d82Z ~]# systemctl list-unit-files |grep enable
crond.service                          enabled
cups.service                           enabled
dmraid-activation.service              enabled
getty@.service                         enabled
lvm2-monitor.service                   enabled
microcode.service                      enabled
nscd.service                           enabled
ntpd.service                           enabled
rsyslog.service                        enabled
sshd.service                           enabled
sysstat.service                        enabled
systemd-readahead-collect.service      enabled
systemd-readahead-drop.service         enabled
systemd-readahead-replay.service       enabled
cups.socket                            enabled
dm-event.socket                        enabled
lvm2-lvmetad.socket                    enabled
nscd.socket                            enabled
default.target                         enabled
multi-user.target                      enabled
</code></pre>

<ol>
<li>默认用户情况</li>
</ol>

<pre><code>[root@iZ25gxj8d82Z ~]# cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
nobody:x:99:99:Nobody:/:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
polkitd:x:999:998:User for polkitd:/:/sbin/nologin
avahi:x:70:70:Avahi mDNS/DNS-SD Stack:/var/run/avahi-daemon:/sbin/nologin
avahi-autoipd:x:170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin
libstoragemgmt:x:998:997:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologin
ntp:x:38:38::/etc/ntp:/sbin/nologin
abrt:x:173:173::/etc/abrt:/sbin/nologin
postfix:x:89:89::/var/spool/postfix:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
chrony:x:997:996::/var/lib/chrony:/sbin/nologin
nscd:x:28:28:NSCD Daemon:/:/sbin/nologin
tcpdump:x:72:72::/:/sbin/nologin
</code></pre>

<p>以下都可以通过 saltstack 这个工具来实现：</p>

<h2 id="toc_1">更新系统</h2>

<p>查看目前有哪些源：</p>

<pre><code>yum repolist all 
</code></pre>

<p>替换官方centos源为阿里云源镜像。</p>

<ul>
<li>备份： </li>
</ul>

<pre><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
</code></pre>

<ul>
<li>下载新的 CentOS-Base.repo 到 /etc/yum.repos.d/ （此处使用阿里云源站内网域名，不占用公网流量）</li>
</ul>

<pre><code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyuncs.com/repo/Centos-7.repo
</code></pre>

<ul>
<li>之后运行以下命令，生成缓存</li>
</ul>

<pre><code>yum makecache
</code></pre>

<ul>
<li>更新系统软件：</li>
</ul>

<pre><code>yum update
</code></pre>

<h2 id="toc_2">打开防火墙，并设置开机自启动</h2>

<pre><code>systemctl enable firewalld.service 
systemctl start firewalld.service
</code></pre>

<h2 id="toc_3">安装 zsh , oh-my-zsh</h2>

<ul>
<li>安装 zsh，配置 zsh 为root用户默认shell。 </li>
</ul>

<pre><code>yum install zsh 
which zsh (/usr/bin/zsh) 
vim /etc/shells 在文件末尾增加一行 /usr/bin/zsh 
chsh -s SHELL
</code></pre>

<ul>
<li>安装 oh-my-zsh </li>
</ul>

<pre><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
</code></pre>

<ul>
<li>安装 autojump:</li>
</ul>

<pre><code>yum install autojump-zsh
</code></pre>

<ul>
<li>配置 .zshrc ：</li>
</ul>

<pre><code>plugins=(git history autojump)
</code></pre>

<h2 id="toc_4">确认git，svn安装情况</h2>

<pre><code>git --version
svn --version
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis 安全]]></title>
    <link href="http://www.free-abc.com.cn/redis-safe.html"/>
    <updated>2016-11-23T11:44:23+08:00</updated>
    <id>http://www.free-abc.com.cn/redis-safe.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">权限控制</h2>

<ul>
<li><p>指定监听ip（127.0.0.1 或者 某个网段）<br/>
在redis.conf 文件中找到<code>bind 192.168.3.112 127.0.0.1</code>。修改。</p></li>
<li><p>绑定 0.0.0.0 ，用 iptables 来控制访问权限<br/>
如果正常业务中redis服务需要被其他服务器来访问，可以设置iptables策略仅允许指定的ip来访问redis服务。</p></li>
<li><p>设置 redis 访问密码来保证数据安全<br/>
在redis.conf 中找到“requirepass”字段，在后面填上你需要的密码，redis客户端也需要使用密码来访问redis服务。</p></li>
</ul>

<blockquote>
<p>通过设置配置文件中 requirepass 项的值(使用命令 CONFIG SET requirepass password )，可以使用密码来保护 Redis 服务器。</p>

<p>如果开启了密码保护的话，在每次连接 Redis 服务器之后，就要使用 AUTH 命令解锁，解锁之后才能使用其他 Redis 命令。</p>

<p>如果 AUTH 命令给定的密码 password 和配置文件中的密码相符的话，服务器会返回 OK 并开始接受命令输入。</p>

<p>另一方面，假如密码不匹配的话，服务器将返回一个错误，并要求客户端需重新输入密码。<br/>
因为 Redis 高性能的特点，在很短时间内尝试猜测非常多个密码是有可能的，因此请确保使用的密码足够复杂和足够长，以免遭受密码猜测攻击。</p>
</blockquote>

<ul>
<li>修改redis服务运行账号
请以较低权限账号运行redis服务，且禁用该账号的登录权限。可以限制攻击者往磁盘写入文件，但是redis数据还是能被黑客访问到，或者被黑客恶意删除。</li>
</ul>

<pre><code>groupadd -r redis &amp;&amp; useradd -r -g redis -s /bin/nologin -d /var/lib/redis -M redis

XEC=/usr/local/bin/redis-server
CLIEXEC=/usr/local/bin/redis-cli
PIDFILE=/var/run/redis_6379.pid
CONF=&quot;/etc/redis/6379.conf&quot;
REDISPORT=&quot;6379&quot;
</code></pre>

<h3 id="toc_1">漏洞描述与危害</h3>

<p>对公网开放，且未启用认证的redis服务器。</p>

<p>攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行 flushall 来清空所有数据。</p>

<p>攻击者可通过 eval 执行 lua 代码，或通过数据备份功能往磁盘写入后门文件，如果 redis  以 root 身份运行，黑客可以给 root 账户写入 ssh 公钥文件，直接通过ssh登录受害服务器。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis配置安装最佳实践]]></title>
    <link href="http://www.free-abc.com.cn/14798724609507.html"/>
    <updated>2016-11-23T11:41:00+08:00</updated>
    <id>http://www.free-abc.com.cn/14798724609507.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">介绍</h2>

<p>略</p>

<h2 id="toc_1">安装</h2>

<p>在官网下载的redis3.04源码。</p>

<p>安装参数见：README</p>

<p>源码放在了：/home/gumoon 目录</p>

<p>使用 gumoon 这个账户进行安装的。</p>

<pre><code>tar zxvf redis-3.0.4.tar.gz
cd redis-3.0.4
make
make install  （安装到 /usr/local/bin)
./utils/install_server.sh
</code></pre>

<p>配置：<br/>
Port           : 6379<br/>
Config file    : /etc/redis/6379.conf<br/>
Log file       : /var/log/redis_6379.log<br/>
Data dir       : /var/lib/redis/6379<br/>
Executable     : /usr/local/bin/redis-server<br/>
Cli Executable : /usr/local/bin/redis-cli</p>

<p>启动 redis 服务：<br/>
<code>/etc/init.d/redis_6379 start</code>  </p>

<h2 id="toc_2">配置</h2>

<h3 id="toc_3">创建redis用户</h3>

<pre><code>groupadd -r redis &amp;&amp; useradd -r -g redis -s /sbin/nologin -d /var/lib/redis -M redis
</code></pre>

<h3 id="toc_4">开机启动脚本</h3>

<p>位置：/lib/systemd/system/redis.service</p>

<pre><code>[Unit]
Description=Redis Server
Before=httpd.service
After=network.target

[Service]
Type=simple
EnvironmentFile=-/etc/sysconfig/redis
User=redis
Group=redis
ExecStart=/usr/local/bin/redis-server /etc/redis/6379.conf

[Install]
WantedBy=multi-user.target
</code></pre>

<p>EnvironmentFile 可以配置一些参数，但是，路径不能配置，必须写绝对路径。</p>

<h2 id="toc_5">redis安全</h2>

<p><a href="redis-safe.html">redis安全</a></p>

<h2 id="toc_6">集群</h2>

<ul>
<li>twemproxy代理 （<a href="https://github.com/twitter/twemproxy">https://github.com/twitter/twemproxy</a> ）</li>
</ul>

<h2 id="toc_7">常用命令</h2>

<p>略</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置访问 phpinfo 的域名]]></title>
    <link href="http://www.free-abc.com.cn/php-phpinfo.html"/>
    <updated>2016-11-23T11:33:06+08:00</updated>
    <id>http://www.free-abc.com.cn/php-phpinfo.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">修改 default.conf</h2>

<p>取消注释掉关于php fastcgi那一段。<br/>
修改 root /usr/share/nginx/html 下的<br/>
     <code>fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</code><br/>
重启 nginx 。</p>

<h2 id="toc_1">增加phpinfo.php 文件</h2>

<p>在 /usr/share/nginx/html 文件夹下，增加 phpinfo.php</p>

<h2 id="toc_2">访问验证</h2>

<p><code>http://{IP}/phpinfo.php</code></p>

<h2 id="toc_3">配置关闭访问，防止信息泄露</h2>

<h3 id="toc_4">防止恶意解析</h3>

<p>配置 默认站点指向某个文件夹，设置该文件夹对nginx用户无任何权限。<br/>
然后就会报：403 Forbidden 错误。从而无法访问。</p>

<p>默认 /usr/share/nginx/html 的文件夹权限是 755,改为 chmod 700 html即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php7回滚到php5.6]]></title>
    <link href="http://www.free-abc.com.cn/php7-php56.html"/>
    <updated>2016-11-23T11:29:08+08:00</updated>
    <id>http://www.free-abc.com.cn/php7-php56.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">为什么回滚到php5.6，而不是用最新的php7</h2>

<ol>
<li>memcached的扩展，源码编译安装的时候，php7不提供合适的头文件。</li>
<li>php7还是不稳定版本，生产环境下，暂缓</li>
</ol>

<h2 id="toc_1">如何切换回php5.6</h2>

<ol>
<li>按照文档<a href="php56-install.html">安装好 php5.6</a></li>
<li>修改 /etc/init.d/php-fpm 脚本</li>
<li>修改 /etc/profile 的PATH（可能不需要改）</li>
<li>修改 ~/.zshrc 的PATH</li>
<li>修改 /etc/passwd 的php用户目录（可能不需要改）</li>
<li>编译php扩展，并添加到php.ini 文件中的相应位置开启</li>
<li>kill php-fpm进程</li>
<li>重启 php-fpm 进程</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 安装 gd 扩展]]></title>
    <link href="http://www.free-abc.com.cn/php-gd.html"/>
    <updated>2016-11-23T11:15:13+08:00</updated>
    <id>http://www.free-abc.com.cn/php-gd.html</id>
    <content type="html"><![CDATA[
<pre><code>yum install libwebp.x86_64 libwebp-devel.x86_64 libwebp-tools.x86_64
yum install libjpeg-turbo-devel.x86_64 libjpeg-turbo-static.x86_64 libjpeg-turbo.x86_64 libjpeg-turbo-utils.x86_64
yum install libpng.x86_64 libpng-devel.x86_64 libpng-static.x86_64
yum install libXpm.x86_64 libXpm-devel.x86_64
yum install freetype-devel.x86_64 freetype.x86_64

./configure --with-freetype-dir=/usr/lib64 --with-jpeg-dir=/usr/lib64
make
make install
</code></pre>

<p>gd扩展应该在编译php的时候编译进去。当然，得先安装图片类库。<br/>
如果gd扩展在编译php的时候就编译进去了，那么，就不需要增加 extension=gd.so 了。</p>

<p>make clean</p>

<p>./configure 后面的选项非常重要，如果没加，就没有那几种图片文件生成支持。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[源码编译安装php5.6.22最佳实践]]></title>
    <link href="http://www.free-abc.com.cn/php56-install.html"/>
    <updated>2016-11-23T11:11:39+08:00</updated>
    <id>http://www.free-abc.com.cn/php56-install.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">准备工作</h2>

<ul>
<li>更新系统 </li>
</ul>

<pre><code>yum update
</code></pre>

<ul>
<li>安装 xml2, 确保有 xml2-config 命令</li>
</ul>

<pre><code>yum install libxml2-devel.x86_64 libxml2.x86_64  
rpm -ql libxml2-devel.x86_64
</code></pre>

<ul>
<li>安装 openssl</li>
</ul>

<pre><code>yum install openssl-devel.x86_64 openssl.x86_64
</code></pre>

<ul>
<li>安装 curl</li>
</ul>

<pre><code>yum install libcurl.x86_64 libcurl-devel.x86_64
</code></pre>

<ul>
<li>安装 libmcrypt</li>
</ul>

<pre><code>yum install libmcrypt.x86_64 libmcrypt-devel.x86_64
</code></pre>

<ul>
<li>安装 gd 需要的lib
<a href="php-gd.html">gd扩展（验证码用的到）</a></li>
</ul>

<h2 id="toc_1">编译</h2>

<ul>
<li>没有 <code>--with-mysql</code> 这种选项了</li>
<li>编译了gd扩展 </li>
</ul>

<pre><code>./configure 
--prefix=/usr/local/php56 
--exec-prefix=/usr/local/php56 
--bindir=/usr/local/php56/bin 
--sbindir=/usr/local/php56/sbin 
--includedir=/usr/local/php56/include 
--libdir=/usr/local/php56/lib/php 
--mandir=/usr/local/php56/php/man 
--with-config-file-path=/usr/local/php56/etc 
--with-mcrypt=/usr/include 
--with-mhash 
--with-openssl 
--with-mysqli=shared,mysqlnd 
--with-pdo-mysql=shared,mysqlnd 
--with-iconv 
--with-zlib 
--enable-zip 
--enable-inline-optimization 
--disable-debug 
--disable-rpath 
--enable-shared 
--enable-xml 
--enable-bcmath 
--enable-shmop 
--enable-sysvsem 
--enable-mbregex 
--enable-mbstring 
--enable-gd-native-ttf 
--enable-pcntl 
--enable-sockets 
--with-xmlrpc 
--enable-soap 
--without-pear 
--with-gettext 
--enable-session 
--with-curl 
--enable-opcache 
--enable-fpm 
--with-fpm-user=nginx 
--with-fpm-group=nginx 
--without-gdbm 
--disable-fileinfo 
--with-freetype-dir=/usr/lib64 
--with-jpeg-dir=/usr/lib64 
--with-gd
</code></pre>

<p>(复制到命令行执行之前，需要去掉换行符）</p>

<pre><code>make &amp;&amp; make install
make clean
</code></pre>

<h2 id="toc_2">php7回滚到php56</h2>

<p><a href="php7-php56.html">php7回滚到php56</a><br/>
如果走这一步的话，下面的步骤有些就不需要再执行了。</p>

<pre><code>cp php.ini-production /usr/local/php56/etc/php.ini
cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
cp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf
</code></pre>

<h2 id="toc_3">设置path</h2>

<pre><code>vim .zshrc
</code></pre>

<p>修改用户跟目录下的 .zshrc 文件，把 /usr/local/php56/bin 加在path项的前面。</p>

<pre><code>source .zshrc
</code></pre>

<h2 id="toc_4">创建php日志文件目录</h2>

<pre><code>mkdir -p /var/log/php-fpm/ &amp;&amp; mkdir -p /var/run/php-fpm &amp;&amp; cd /var/run/ &amp;&amp; chown -R nginx:nginx php-fpm

mkdir -p /var/lib/php/session

chown -R nginx:nginx /var/lib/php
</code></pre>

<h2 id="toc_5">检查扩展是否都安装了，安装并开启</h2>

<pre><code>cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226
</code></pre>

<h2 id="toc_6">配置 php.ini 的 extension及其它</h2>

<pre><code>zend_extension=opcache.so
extension=mysqli.so
extension=pdo_mysql.so
</code></pre>

<p>或者，使用 slat 同步php.ini &amp; php-fpm.conf 文件</p>

<p>启动php-fpm：<br/>
先给 /etc/init.d/php-fpm 增加可执行权限。</p>

<pre><code>/etc/init.d/php-fpm start
</code></pre>

<h2 id="toc_7">配置 memcached 扩展</h2>

<p><a href="php-memcached.html">php5.6 安装 memcached扩展</a></p>

<h2 id="toc_8">配置gd扩展</h2>

<p><a href="php-gd.html">gd扩展（验证码用的到）</a></p>

<h2 id="toc_9">查看phpinfo</h2>

<p>检查扩展安装情况。<br/>
<a href="php-phpinfo.html">配置访问 phpinfo 的域名</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached 最佳实践]]></title>
    <link href="http://www.free-abc.com.cn/14798699605642.html"/>
    <updated>2016-11-23T10:59:20+08:00</updated>
    <id>http://www.free-abc.com.cn/14798699605642.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">介绍</h2>

<ul>
<li>它比memcache好，有加锁机制等</li>
<li>它比redis性能更高</li>
<li>它特别适合于缓存小数据片</li>
<li>在阿里云上使用yum安装memcached。</li>
</ul>

<h2 id="toc_1">与php配合</h2>

<ul>
<li>安装php的memcached扩展后，就可以通过php语言来编写访问memcached服务的脚本了</li>
<li>php的memcached扩展，通过 libmemcached 库来跟memcached服务器交互</li>
<li>php7无法编译memcached扩展。提示头文件找不到。</li>
<li>最后改成使用<a href="php-memcached.html">php5.6 安装 memcached 扩展</a></li>
</ul>

<h2 id="toc_2">安装</h2>

<p>执行：</p>

<pre><code>yum search memcached
</code></pre>

<p>找到合适的版本的memcached，在这之前，需要先配置好更新及时的 yum源（没有专门的源，配置好 epel 源即可）。 </p>

<p>执行：</p>

<pre><code>yum install memcached.x86_64 libmemcached.x86_64 libmemcached-devel.x86_64
</code></pre>

<p>选择：libmemcached.x86_64（php扩展连接memcached服务器时会用到）、 libmemcached-devel.x86_64（php扩展编译时会用到）、 memcached.x86_64、libevent-devel(memcached编译的时候需要，会默认安装)这三个软件包进行安装。 </p>

<h2 id="toc_3">进程挂掉自动重启</h2>

<p>待补充</p>

<h2 id="toc_4">测试memcached</h2>

<pre><code>telnet 127.0.0.1 11211
</code></pre>

<h2 id="toc_5">开机自动启动</h2>

<p>自从centos7以来，系统服务的管理通过 systemd 来管理。 通过yum安装的memcached，默认已经安装了 memcached.service 脚本。 开机自动启动配置： </p>

<pre><code>systemctl enable memcached.service
</code></pre>

<h2 id="toc_6">权限控制</h2>

<p>修改 <code>/lib/systemd/system/memcached.service</code> 增加 <code>-l 127.0.0.1</code> 参数，然后重启即可。 </p>

<pre><code>systemctl daemon-reload
 systemctl restart memcached 
</code></pre>

<p>增加 -l 127.0.0.1 后，ipv6地址的监听就没有了。(ss -ntlp) </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 安装 memcached 扩展]]></title>
    <link href="http://www.free-abc.com.cn/php-memcached.html"/>
    <updated>2016-11-23T10:55:08+08:00</updated>
    <id>http://www.free-abc.com.cn/php-memcached.html</id>
    <content type="html"><![CDATA[
<ol>
<li>先要安装 memcached 库：</li>
</ol>

<pre><code>yum install libmemcached-devel.x86_64 libmemcached.x86_64
</code></pre>

<ol>
<li>下载</li>
</ol>

<pre><code>wget http://pecl.php.net/get/memcached-2.2.0.tgz
</code></pre>

<ol>
<li>解压缩</li>
</ol>

<pre><code>tar zxvf memcached-2.2.0.tgz
</code></pre>

<ol>
<li>编译</li>
</ol>

<pre><code>/usr/local/php56/bin/phpize (或者 phpize)

./configure --enable-memcached-sasl

make

make install
</code></pre>

<ol>
<li>确认是否更新：</li>
</ol>

<pre><code>stat memcached.so
</code></pre>

<p>6.添加进php.ini</p>

<pre><code>extension=memcached.so
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx最佳实践]]></title>
    <link href="http://www.free-abc.com.cn/14798693795226.html"/>
    <updated>2016-11-23T10:49:39+08:00</updated>
    <id>http://www.free-abc.com.cn/14798693795226.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">安装</h2>

<p>从 <code>http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code> 下载最新源更新包。</p>

<pre><code>rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm (这个文件从nginx官网下载的) 
yum install nginx （一定先下载上面那个rpm，确保安装最新的nginx稳定版并且进行了包校验）
</code></pre>

<p>检查安装的版本：</p>

<pre><code>nginx -V 
</code></pre>

<p>打开80端口：</p>

<pre><code>firewall-cmd --add-service=http --permanent 
firewall-cmd —reload 
</code></pre>

<p>启动服务：</p>

<pre><code>systemctl enable nginx.service
systemctl start nginx.service
systemctl restart nginx.service

nginx 启动nginx
nginx -s reload 重启nginx
</code></pre>

<p>然后检测是否安装成功。</p>

<h2 id="toc_1">配置</h2>

<ol>
<li>worker_processes auto nginx进程数，建议按照cpu核数来指定。2个4核cpu时计为8. auto 将自动检测cpu核数。</li>
<li>worker_rlimit_nofile 65535; 这个指令是指一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n)与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与 ulimit -n 的值保持一致。 现在在 linux2.6内核下进程最大打开文件数为65535，所以 worker_rlimit_nofile 就相应应该填写65535. 这是因为 nginx 调度时分配请求到进程并不是那么均衡，所以加入填写10240，总并发量达到3-4万时就有进程可能超过10240，这是就会返回502错误。</li>
<li>use epoll; nginx自动选择最高效的连接处理方法。这个不需要指定。</li>
<li>worker_connections number; 每个 worker_process 可以同时打开的最大连接数。理论上每台nginx服务器的最大连接数为 worker_processes*worker_connections。
还有 fastcgi , https 等等</li>
</ol>

<h2 id="toc_2">nginx的高性能指标</h2>

<p>每秒处理请求数1000以上。（SAE每秒处理请求数是5000）<br/>
每个请求的处理时间：100毫秒以下。</p>

<h2 id="toc_3">如何评测</h2>

<pre><code>ab -n 10000 -c 100 http://www.yourdomain.com/
</code></pre>

<h2 id="toc_4">问题排查</h2>

<p>多看日志</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notification.Name]]></title>
    <link href="http://www.free-abc.com.cn/14798309909156.html"/>
    <updated>2016-11-23T00:09:50+08:00</updated>
    <id>http://www.free-abc.com.cn/14798309909156.html</id>
    <content type="html"><![CDATA[
<hr/>

<p>表达的意义：通知名称。</p>

<p>是一个嵌套类型。</p>

<p>该类型是一个结构体。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Key-paths 作为字符串]]></title>
    <link href="http://www.free-abc.com.cn/14794651181650.html"/>
    <updated>2016-11-18T18:31:58+08:00</updated>
    <id>http://www.free-abc.com.cn/14794651181650.html</id>
    <content type="html"><![CDATA[
<p>用 #keyPath() 代替。<br/>
如下：</p>

<pre><code>class Person: NSObject {
  var name: String = &quot;&quot;

  init(name: String) {
    self.name = name
  }
}
let me = Person(name: &quot;Cosmin&quot;)
me.value(forKeyPath: #keyPath(Person.name))
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DispatchQueue（异步）]]></title>
    <link href="http://www.free-abc.com.cn/14794647079536.html"/>
    <updated>2016-11-18T18:25:07+08:00</updated>
    <id>http://www.free-abc.com.cn/14794647079536.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>DispatchQueue manages the execution of work items. Each work item submitted to a queue is processed on a pool of threads managed by the system.</p>
</blockquote>

<p>例子：</p>

<pre><code>let queue = DispatchQueue(label: &quot;Swift 3&quot;)
queue.async {
  print(&quot;Swift 3 queue&quot;)
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UserDefaults]]></title>
    <link href="http://www.free-abc.com.cn/14794370507786.html"/>
    <updated>2016-11-18T10:44:10+08:00</updated>
    <id>http://www.free-abc.com.cn/14794370507786.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">是什么？</h2>

<p>NSUserDefaults 类的连接。<br/>
提供了一个对接默认系统的编程接口。<br/>
数据存储在 user defaults database。<br/>
数据先存储在内存中，通过周期性的自动调用<code>synchronize()</code>来刷新数据。</p>

<h2 id="toc_1">作用</h2>

<p>存储用户的自定义数据<br/>
如：界面显示哪些部分、文档自动存储策略、默认的启动状态、默认行为</p>

<h2 id="toc_2">可以存储哪些数据</h2>

<p>floats, doubles, integers, Booleans, and URLs.<br/>
支持的对象类型：NSData, NSString, NSNumber, NSDate, NSArray, or NSDictionary. </p>

<p>如果你要存储其他类型的对象，你需要把它归档为 NSData 实例。</p>

<h2 id="toc_3">返回值</h2>

<p>返回值是常量。不可改变。<br/>
即使你存的是一个变量。</p>

<h2 id="toc_4">存储</h2>

<p>默认为每个用户创建自动创建一个数据库。<br/>
目前不支持分 domain 存储数据。需要的话，请使用 <code>CFPreferences</code><br/>
但是，<code>UserDefaults</code> 可以分 domain 读数据。</p>

<p>If you want to track a file by reference but you require explicit control over when resolution occurs, you should take care to write out bookmark data to NSUserDefaults rather than rely on -[NSUserDefaults setURL:forKey:]. This allows you to call +[NSURL URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:] at a time when you know your application will be able to handle the potential I/O or required user interface interactions.</p>

<h2 id="toc_5">沙盒</h2>

<p>不支持访问其它应用的 <code>UserDefaults</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模拟器]]></title>
    <link href="http://www.free-abc.com.cn/14794017400084.html"/>
    <updated>2016-11-18T00:55:40+08:00</updated>
    <id>http://www.free-abc.com.cn/14794017400084.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">目录：</h2>

<p>打印它：<code>print(NSHomeDirectory())</code></p>

<h2 id="toc_1">旋转屏幕报错：</h2>

<blockquote>
<p>if we&#39;re in the real pre-commit handler we can&#39;t actually add any new fences due to CA restriction</p>
</blockquote>

<p>解决办法：</p>

<pre><code>in your Xcode:

Click on your active scheme name right next to the Stop button
Click on Edit Scheme....
in Run (Debug) select the Arguments tab
in Environment Variables click +
add variable: OS_ACTIVITY_MODE = disable
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络访问]]></title>
    <link href="http://www.free-abc.com.cn/14793884482613.html"/>
    <updated>2016-11-17T21:14:08+08:00</updated>
    <id>http://www.free-abc.com.cn/14793884482613.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">错误信息</h2>

<blockquote>
<p>App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app&#39;s Info.plist file.</p>
</blockquote>

<p>解决办法：<br/>
在Info.plist文件中添加&quot;App Transport SecuritySettings&quot;, Type为&quot;Dictionary&quot;,再添加&quot;Allow Arbitray Loads&quot;, Type 为&quot;Boolean&quot;，“Value”为“YES”即可。</p>

<blockquote>
<p><a href="http://img3.imgtn.bdimg.com/it/u=2489051743,1646771720&amp;fm=21&amp;gp=0.jpg">http://img3.imgtn.bdimg.com/it/u=2489051743,1646771720&amp;fm=21&amp;gp=0.jpg</a><br/>
下载不了。</p>
</blockquote>

<p>解决办法：<br/>
文件名含有特殊字符: &amp; </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selector]]></title>
    <link href="http://www.free-abc.com.cn/14793813370586.html"/>
    <updated>2016-11-17T19:15:37+08:00</updated>
    <id>http://www.free-abc.com.cn/14793813370586.html</id>
    <content type="html"><![CDATA[
<p>例子：<br/>
<code>NotificationCenter.default.addObserver(self, selector: #selector(downloadImage), name: Notification.Name(&quot;BLDownloadImageNotification&quot;), object: nil)</code></p>

<p>语法：<br/>
<code>#selector(downloadImage)</code><br/>
<code>#selector(self.downloadImage)</code></p>

<p>错误提示：<br/>
<em>unrecognized selector sent to instance</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类和结构体]]></title>
    <link href="http://www.free-abc.com.cn/14793126581644.html"/>
    <updated>2016-11-17T00:10:58+08:00</updated>
    <id>http://www.free-abc.com.cn/14793126581644.html</id>
    <content type="html"><![CDATA[
<ul>
<li>定义类</li>
<li>定义结构体</li>
<li>修饰符</li>
<li>定义属性</li>
<li>定义构造器</li>
<li>定义方法</li>
<li>创建类实例</li>
<li>创建结构体实例</li>
<li>引用类型的比较</li>
<li>self关键字</li>
<li>类和结构体的选择</li>
</ul>

<p>存储属性必须指定初始值。</p>

<p>类的实例可以称为对象。枚举和结构体的实例不能叫对象。</p>

<p>枚举、结构体是值类型，传递的时候需要复制，类是引用类型。</p>

<p>结构体的主要目的是用于封装少量相关的简单数据<br/>
如果需要在传递参数或者赋值时自动复制副本，使用结构体。<br/>
明确该类型无须继承另一个已有的类或者被其他类继承时，使用结构体。</p>

<p>大部分时候，应该自定类，而不是结构体。</p>

<p>只有类才支持继承，枚举和结构体都不可以。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于枚举]]></title>
    <link href="http://www.free-abc.com.cn/14793120620777.html"/>
    <updated>2016-11-17T00:01:02+08:00</updated>
    <id>http://www.free-abc.com.cn/14793120620777.html</id>
    <content type="html"><![CDATA[
<ul>
<li>概念</li>
<li>定义枚举</li>
<li>使用枚举声明变量</li>
<li>枚举值和switch语句</li>
<li>原始值rawValue</li>
<li>为枚举值定义关联值</li>
</ul>

<h2 id="toc_0">概念</h2>

<ol>
<li>用于管理一组有限的值的集合</li>
<li>支持计算属性</li>
<li>支持实例方法和类方法</li>
<li>支持定义构造器来完成初始化</li>
<li>支持扩展和协议</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重要概念]]></title>
    <link href="http://www.free-abc.com.cn/14793015188240.html"/>
    <updated>2016-11-16T21:05:18+08:00</updated>
    <id>http://www.free-abc.com.cn/14793015188240.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">创建项目时的概念</h2>

<p>organization identifier : 组织标识。一般情况下，这里输入的是公司或组织的域名。</p>

<p>Bundle Identifier : 捆绑标识符。改标识符由 Product Name + Company Identifier 构成。因为在 App Store 上发布应用时会用到它，所以它的命名不可重复。</p>

<p>通用工程是指一个工程在 iPhone 和 iPad 上都可以正常运行。</p>

<h2 id="toc_1">Storyboard</h2>

<p>把控件拖到Storyboard的居中位置后，运行，我们发现并非居中，还需要为控件添加 Auto Layout 约束。</p>

<p>一个工程只需要一个主故事板文件就可以了。</p>

<p>每个视图控制器都对应一个Scene(场景）。可以理解为应用的一个界面或屏幕，其中有很多视图或控件。相当于一个xib。</p>

<p>Segue不但定义了Scene之间的跳转方式，还体现了Scene之间的关系。跳转的类型分：Push、Modal、Popover和自定义方式。</p>

<p>push是树形导航模式，Modal是模态导航模式，popover是呈现浮动窗口。</p>

]]></content>
  </entry>
  
</feed>
